# coding: utf-8

"""
    BeLifeline Server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.3.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.algorithm_algorithm_infomation import AlgorithmAlgorithmInfomation

class TestAlgorithmAlgorithmInfomation(unittest.TestCase):
    """AlgorithmAlgorithmInfomation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AlgorithmAlgorithmInfomation:
        """Test AlgorithmAlgorithmInfomation
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AlgorithmAlgorithmInfomation`
        """
        model = AlgorithmAlgorithmInfomation()
        if include_optional:
            return AlgorithmAlgorithmInfomation(
                algorithm_id = '',
                algorithm_name = '',
                algorithm_description = '',
                need_external = [
                    'HOGE_ID'
                    ],
                algorithm_scales = [
                    1.337
                    ],
                algorithm_data_ids = [
                    ''
                    ],
                first_entry_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_entry_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return AlgorithmAlgorithmInfomation(
                algorithm_id = '',
                algorithm_name = '',
                algorithm_description = '',
                need_external = [
                    'HOGE_ID'
                    ],
                algorithm_scales = [
                    1.337
                    ],
                algorithm_data_ids = [
                    ''
                    ],
                first_entry_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_entry_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testAlgorithmAlgorithmInfomation(self):
        """Test AlgorithmAlgorithmInfomation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
